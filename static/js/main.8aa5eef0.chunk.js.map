{"version":3,"sources":["commons/components/navbar/NavbarComponent.js","commons/components/notfound/NotfoundComponent.js","words/components/WordComponent.js","commons/components/loader/LoaderComponent.js","words/views/WordView.js","words/views/WordsByFirstLetterView.js","words/views/WordsSearchView.js","commons/assert.js","words/entities/Meaning.js","words/entities/Word.js","words/repositories/WordApiRepository.js","index.js"],"names":["NavbarComponent","react_default","a","createElement","className","NotfoundComponent","WordComponent","props","meaningsHtml","word","meanings","map","meaning","index","key","type","length","scientific","description","synonymWords","wordId","onClick","onWordClick","relatedWords","id","LoaderComponent","WordView","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getWord","setState","isFetching","error","wordApiRepository","then","catch","reason","componentDidMount","componentDidUpdate","prevProps","render","state","loader_LoaderComponent","components_WordComponent","history","push","concat","React","Component","withRouter","abc","WordsByFirstLetterView","getWordsByFirstLetter","letter","words","letterPickerHtml","wordsHtml","Fragment","WordsSearchView","searchWords","text","handleSubmit","e","preventDefault","input","value","searcherHtml","onSubmit","classname","placeholder","defaultValue","ref","element","assert","condition","Error","Meaning","Word","WordApiRepository","apiHost","url","fetch","response","json","parseJsonWord","parseJsonWords","wordsJson","wordJson","parseJsonMeanings","meaningsJson","meaningJson","synonym_words","related_words","process","ReactDOM","react_router_dom","navbar_NavbarComponent","react_router","exact","path","to","_ref","match","views_WordsByFirstLetterView","params","_ref2","views_WordsSearchView","_ref3","views_WordView","component","document","getElementById"],"mappings":"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","file":"static/js/main.8aa5eef0.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavbarComponent = () => {\n    return (\n        <div className=\"navbar\">\n            <h1>llaor</h1>\n        </div>\n    );\n};\n\nexport default NavbarComponent;\n","import React from 'react';\n\nconst NotfoundComponent = () => {\n    return (\n        <div className=\"notfound\">\n            <h4>No s'ha trobat la p√†gina</h4>\n        </div>\n    );\n};\n\nexport default NotfoundComponent;\n","import React from 'react';\n\nconst WordComponent = props => {\n    const meaningsHtml = props.word.meanings.map((meaning, index) =>\n        <div className=\"meaning-container\" key={index}>\n            <p className=\"meaning-type\">\n                {meaning.type}{meaning.type.length > 0 ? \".\" : \"\"}\n            </p>\n            {meaning.scientific.length > 0 &&\n                <p className=\"meaning-scientific\">({meaning.scientific})</p>}\n            <p className=\"meaning-description\">{meaning.description}.</p>\n            {meaning.synonymWords.length > 0 &&\n                <div className=\"meaning-synonyms\">\n                    <label>sin√≤nims</label>\n                    <br />\n                    {meaning.synonymWords.map((wordId, index) =>\n                        <button onClick={() => props.onWordClick(wordId)}\n                            key={index}>{wordId}</button>)}\n                </div>\n            }\n            {meaning.relatedWords.length > 0 &&\n                <div className=\"meaning-related\">\n                    <label>relacionats</label>\n                    <br />\n                    {meaning.relatedWords.map((wordId, index) =>\n                        <button onClick={() => props.onWordClick(wordId)}\n                            key={index}>{wordId}</button>)}\n                </div>\n            }\n        </div>\n    );\n    return (\n        <div className=\"word-container\">\n            <h1 className=\"word-name\">{props.word.id}</h1>\n            {meaningsHtml}\n        </div>\n    );\n};\n\nexport default WordComponent;\n","import React from 'react';\n\nconst LoaderComponent = () => {\n    return (\n        <div className=\"loading\">\n            <div className=\"loader\" />\n        </div>\n    );\n};\n\nexport default LoaderComponent;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport WordComponent from 'words/components/WordComponent';\nimport LoaderComponent from 'commons/components/loader/LoaderComponent';\n\nclass WordView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: true,\n            error: false,\n            word: null\n        };\n    }\n\n    getWord = () => {\n        this.setState({isFetching: true, error: false});\n        this.props.wordApiRepository.getWord(this.props.wordId)\n            .then(word => this.setState({isFetching: false, error: false, word: word}))\n            .catch(reason => this.setState({isFetching: false, error: true}));\n    }\n\n    componentDidMount = () => {\n        this.getWord();\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps.wordId !== this.props.wordId) {\n            this.getWord();\n        }\n    }\n\n    render = () => {\n        if (this.state.isFetching) {\n            return <LoaderComponent />;\n        }\n        if (this.state.error) {\n            return <p>Error!</p>;\n        }\n        return <WordComponent word={this.state.word}\n                    onWordClick={wordId => this.props.history.push(`/diccionari/mots/${wordId}`)}/>;\n    };\n};\n\nexport default withRouter(WordView);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport WordComponent from 'words/components/WordComponent';\nimport LoaderComponent from 'commons/components/loader/LoaderComponent';\n\nconst abc = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'l', 'm',\n             'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'x'];\n\nclass WordsByFirstLetterView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: true,\n            error: false,\n            words: null\n        };\n    }\n\n    getWordsByFirstLetter = letter => {\n        this.setState({isFetching: true, error: false});\n        this.props.wordApiRepository.getWordsByFirstLetter(this.props.letter)\n            .then(words => this.setState({isFetching: false, error: false, words: words}))\n            .catch(reason => this.setState({isFetching: false, error: true}));\n    }\n\n    componentDidMount = () => this.getWordsByFirstLetter(this.state.letter);\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps.letter !== this.props.letter) {\n            this.getWordsByFirstLetter(this.props.letter);\n        }\n    }\n\n    render = () => {\n        const letterPickerHtml = abc.map(letter =>\n            <button className={letter === this.props.letter && 'active'}\n                onClick={() => this.props.history.push(`/diccionari/lletres/${letter}`)}>{letter}</button>);\n        let wordsHtml = null;\n        if (this.state.isFetching) {\n            wordsHtml = <LoaderComponent />;\n        }\n        else if (this.state.error) {\n            wordsHtml = <p>Error!</p>;\n        }\n        else {\n            wordsHtml = this.state.words.map(word => {\n                return (\n                    <li>\n                        <WordComponent word={word}\n                            onWordClick={wordId => this.props.history.push(`/diccionari/mots/${wordId}`)}/>\n                    </li>\n                )\n            });\n        }\n        return (\n            <React.Fragment>\n                <div className='letters-picker'>\n                    <ul>{letterPickerHtml}</ul>\n                </div>\n                <div className='content'>\n                    <ul>{wordsHtml}</ul>\n                </div>\n            </React.Fragment>\n        )\n    };\n};\n\nexport default withRouter(WordsByFirstLetterView);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport WordComponent from 'words/components/WordComponent';\nimport LoaderComponent from 'commons/components/loader/LoaderComponent';\n\nclass WordsSearchView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            error: false,\n            words: null\n        };\n    }\n\n    searchWords = text => {\n        this.setState({isFetching: true, error: false});\n        this.props.wordApiRepository.searchWords(text)\n            .then(words => this.setState({isFetching: false, error: false, words: words}))\n            .catch(reason => this.setState({isFetching: false, error: true}));\n    }\n\n    componentDidMount = () => {\n        this.searchWords(this.props.text);\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps.text !== this.props.text) {\n            this.searchWords(this.props.text);\n        }\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault();\n        const text = this.input.value;\n        this.props.history.push(`/diccionari/cerca/${text}`);\n    }\n\n    render = () => {\n        const searcherHtml =\n            <form onSubmit={this.handleSubmit}>\n                <input classname=\"search-input\" type=\"text\" placeholder=\"cerca..\"\n                    defaultValue={this.props.text} ref={(element) => { this.input = element }} />\n                <button type=\"submit\">Cerca</button>\n            </form>;\n        let wordsHtml = null;\n        if (this.state.isFetching) {\n            wordsHtml = <LoaderComponent />;\n        }\n        else if (this.state.error) {\n            wordsHtml = <p>Error!</p>;\n        }\n        else if (this.state.words !== null) {\n            wordsHtml = this.state.words.map(word => {\n                return (\n                    <li>\n                        <WordComponent word={word}\n                            onWordClick={wordId => this.props.history.push(`/diccionari/mots/${wordId}`)}/>\n                    </li>\n                )\n            });\n        }\n        return (\n            <React.Fragment>\n                <div className='searcher'>\n                    <ul>{searcherHtml}</ul>\n                </div>\n                <div className='content'>\n                    <ul>{wordsHtml}</ul>\n                </div>\n            </React.Fragment>\n        )\n    };\n};\n\nexport default withRouter(WordsSearchView);\n","const assert = condition => {\n    if (!condition) {\n        throw Error(\"Assertion failed\");\n    }\n};\n\nexport default assert;\n","import assert from 'commons/assert';\n\nclass Meaning {\n    constructor(scientific, type, description, synonymWords, relatedWords) {\n        assert(typeof(scientific) === 'string');\n        assert(typeof(type) === 'string');\n        assert(typeof(description) === 'string');\n        assert(synonymWords.map(word => assert(typeof(word) === 'string')));\n        assert(relatedWords.map(word => assert(typeof(word) === 'string')));\n\n        this.scientific = scientific;\n        this.type = type;\n        this.description = description;\n        this.synonymWords = synonymWords;\n        this.relatedWords = relatedWords;\n    }\n}\n\nexport default Meaning;\n","import assert from 'commons/assert';\nimport Meaning from 'words/entities/Meaning';\n\nclass Word {\n    constructor(id, meanings) {\n        assert(typeof(id) === 'string');\n        assert(meanings.map(meaning => assert(meaning instanceof Meaning)));\n\n        this.id = id;\n        this.meanings = meanings;\n    }\n}\n\nexport default Word;\n","import Word from 'words/entities/Word';\nimport Meaning from 'words/entities/Meaning';\n\nexport class WordApiRepository {\n    constructor(apiHost) {\n        this.apiHost = apiHost;\n    }\n\n    getWord = wordId => {\n        const url = `${this.apiHost}/words/${wordId}`;\n        return fetch(url)\n            .then(response => response.json())\n            .then(json => parseJsonWord(json));\n    };\n\n    getWordsByFirstLetter = letter => {\n        const url = `${this.apiHost}/words?first_letter=${letter}`;\n        return fetch(url)\n            .then(response => response.json())\n            .then(json => parseJsonWords(json));\n    }\n\n    searchWords = text => {\n        const url = `${this.apiHost}/words?search=${text}`;\n        return fetch(url)\n            .then(response => response.json())\n            .then(json => parseJsonWords(json));\n    }\n}\n\nconst parseJsonWords = wordsJson =>\n    wordsJson.map(wordJson => parseJsonWord(wordJson));\n\nconst parseJsonWord = wordJson =>\n    new Word(wordJson.word, parseJsonMeanings(wordJson.meanings));\n\nconst parseJsonMeanings = meaningsJson =>\n    meaningsJson.map(meaningJson => {\n        return new Meaning(meaningJson.scientific,\n                           meaningJson.type,\n                           meaningJson.description,\n                           meaningJson.synonym_words,\n                           meaningJson.related_words);\n    });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport './index.scss';\nimport NavbarComponent from 'commons/components/navbar/NavbarComponent';\nimport NotfoundComponent from 'commons/components/notfound/NotfoundComponent';\n\nimport WordView from 'words/views/WordView';\nimport WordsByFirstLetterView from 'words/views/WordsByFirstLetterView';\nimport WordsSearchView from 'words/views/WordsSearchView';\nimport { WordApiRepository } from 'words/repositories/WordApiRepository';\n\nconst apiHost = process.env['REACT_APP_API_HOST'];\n\nReactDOM.render(\n    <Router>\n        <NavbarComponent />\n        <Switch>\n            <Route exact path=\"/diccionari/lletres\" render={() =>\n                <Redirect to=\"/diccionari/lletres/a\"/>} />\n            <Route path=\"/diccionari/lletres/:id\" render={({match}) => (\n                <WordsByFirstLetterView letter={match.params.id}\n                    wordApiRepository={new WordApiRepository(apiHost)} /> )}\n            />\n            <Route path=\"/diccionari/cerca/:text?\" render={({match}) => (\n                <WordsSearchView text={match.params.text}\n                    wordApiRepository={new WordApiRepository(apiHost)} /> )}\n            />\n            <Route path=\"/diccionari/mots/:id\" render={({match}) => (\n                <WordView wordId={match.params.id}\n                    wordApiRepository={new WordApiRepository(apiHost)} /> )}\n            />\n            <Route component={NotfoundComponent} />\n        </Switch>\n    </Router>\n, document.getElementById('root'));\n"],"sourceRoot":""}